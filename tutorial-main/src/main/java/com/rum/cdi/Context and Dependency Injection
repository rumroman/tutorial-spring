                                Контекст и внедрение зависимостей(CDI).

   CDI преобразует практически все сущности Java EE  в управляемые компоненты, которые можно внедрять и перехватывать.
Концепция CDI основана на принципе "слабой связанности и строгой типизации". Добавление в платформу перехватичиков,
декораторов и и событий придает ей допольнительную гибкость.

Компонент EJB должен иметь метаданные , конструктор по умолчанию не конечным , и т.д. Они также выполняются внутри
контейнера (например , контейнера EJB), который предоставляет определенные сервисы: например ,транзакции, организацию
пула, безопасность и т.д.

Управляемые компоненты - это объекты , которые управляются контейнером и поддерживают только небольшой набор базовых
сервисов: внедрение ресурса, управление жизненным циклом и перехват.

Компоненты - это объекты CDI, основанные на базовой модели управляемых компонентов. Они имеют улучшенный жизненный цикл
для объектов с сохранением состояния; привязаны к четко определенным контекстам; обеспечивают сохранение безопасности
типов при внедрении зависимостей , перехвате и декорации; специализируются с помощью аннотаций квалификатора; могут
использоватсья в языке выражений (EL). По сути, с очень малым количеством исключений потенциально каждый класс Java,
имеющий конструктор по умолчанию и исполняемый внутри контейнера , являетя компонентом.

                                        Внедрение зависимостей(DI).

Внедрение зависимостей(DI) - это шаблон разработки , в котором разделяются зависимые компоненты. Здесь мы имеем дело с
инверсией управления, причем инверсии подвергается процесс получения необходимой зависимости. DI можно охарактеризовать
как полную противоположность применения интерфейса JNDI. Объекту не приходится искать другие обхекты, так как контейнер
внедряет эти зависимые сущности без вашего участия. В этом состоит принцип Голливуда : "Не звоните нам(не ищите объекты),
 мы сами вам позвоним(внедрим объекты)".

                                       Управление жизненным циклом.

Если вы хотите запустить компонент CDI внутри контейнера , вам нельзя указывать ключевое слово new. Вместо этого вам
необходимо внедрить компонент, а все остальное сделает контейнер. Подразумевается , что только контейнер отвечает за
управление жизненным циклом компонента; сначала он создает экземпляр, затем избавляется от него. Итак, как же вам
инициализировать компонент, если вы не можете вызвать конструктор? В этом случае контейнер дает вам указатель после
конструкции экземпляра и перед его уничтожением.
    Когда вы внедряете компонент, только контейнер(EJB, CDI или веб-контейнер) отвечает за создани экземпляра(с исполь-
зованием кодового слова new). Затем он разрешает зависимости и вызывает любой метод с аннотацией @PostConstruct до
первого вызова бизнес-метода бизнес метода на компоненте. После этого оповещение с помощью обратного вызова @PreDestroy
сигнализирует о том, что экземпляр удаляется контейнером.

                                        Области видимости и контекст.

Компоненты CDI могут сохранять свое состояние и явояются контекстуальными. Это означает, что они живут в пределах четко





























