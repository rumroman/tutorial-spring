                                       Веб-службы в стиле REST.

Передача состояния представления (REST) - это стиль архитектуры , основанный на принципах работы Сети.

В RESTful-архитектурах ресурсам отводится центральная роль. Ресурс = это любая сущность, на которую клиент может
поставить ссылку или с которой может попытаться взаимодействовать. Ресурс может храниться в файле, базе данных
фактически по любому адресу.


                                        Представления.

Работая с ресурсом клиент всегда имеет дело с тем или иным его представлением , сам ресурс остается на сервере.
Представление - это любая полезная информация о состоянии ресурса. Наример, у списка книг по Java на сайте есть как
минимум два представления:
-HTML - страница , отображаемая в браузере: http://www.apress.com/java;
-файл с книгами в формате "значения, разделенные запятыми" (CSV): http://www.apress.com/resource/csv/bookcategory?cat=32

                                        Адресуемость.

Ваша веб-служба должна делать приложение максимально адресуемым. Это означает, что каждый значимый информационный
элемент в вашем приложении должен быть ресурсом и иметь URI, по которому можено легко попасть к этому ресурсу.
Уникальные URI обеспечивают связываемость ваших ресурсов , а поскольку они предоставляются через единообразный интерфейс
, все точно знают, как с ними взаимодействовать.

                                        Связность.

На всех веб-страницахх есть ссылки для перехода на другие страницы, они расположены логичным и интуитивно понятным
образом , и весь Интернет является очень хорошо связанным.


                                      Единообразный интерфейс.

Одно из важнейших ограничений , оформляющих архитектуру RESTful, - использование единообразного интерфейса для
управления всеми вашими ресурсами. Выберите подходящий вас интерфейс, но применяйте его одинаково во всех котекстах,
от ресурса к ресурсу , от службы к службе. Никогда не отступайте от выбранного принципа, не изменяйте исходного значения.

    Основным веб-протоколом де-факто является HTTP. Это основанный на работе с документами стандартизированный протокол,
действующий по принципу "запрос-ответ", обеспечивающий взаимодействие клиента и сервера . HTTP - это единообразный
интерфейс веб служб с передачей состояния представления.

    Единообразный интерфейс не только способствует узнаваемости, но и улучшает интерперабельность между приложениями.
Протокол HTTP широко поддерживается , а связанных с ним клиентских библиотек так много, что вам врд ли придется
сталкиваться с проблемами при обмене информацией.

                                     Отсутствие сохранения состояния.

Последняя из важнейших черт REST - отсутствие сохранения состояния. Она означает, что каждый HTTP-запрос происходит
в полной изоляции от других, так как серверу никогда не приходится отслеживать запросы, выполненные ранее.
Состояние ресурса и состояние приложения обычно различаются.
Состояние ресурса должно находиться на сервере и совместно использоваться всеми ,а состояние приложения - оставаться
на клиенте и приналдежатьтолько ему.
Если корзина для заказов - это ресурс с ограниченным доступом ( то есть доступный всего одному клиенту), то приложения
должно отслеживать идентификатор корзины заказов в рамках клиентского сеанса.

                                        HTTP.

   HTTP - это протокол для распределенных совместно работающих гипермедийных информационных систем.

                                        Запрос и ответ

Протокол HTTP основан на запросах и ответах, которыми обмениваются клиент и сервер. Клиент отправляет на сервер запрос
и ожидает получить от него ответ . Сообщения , которыми они обмениваются состоят из конверта и тела. Тело также
называется полезной информацией или сущностью.


                                        Заголовки.

Поля HTTP-заголовков - это компоненты заголовка сообщения, содержащиеся в запросах и ответах. Файлы заголовков состоят
из разделенных двоеточиями пар "имя/значение", которые записываются обычным текстом , завершаются перезодом на новую
строку и последовательностью символов перехода на новую строку.

                                        HTTP-методы.

Сеть состоит из четко идентифицированных ресурсов , связанных друг с другом и доступных благодаря простым HTTP-запросам.
Основными стандартизорованными типами HTTP-запросов являются GET,POST,PUT,DELETE. Они также именуются операциями,
командами или методами. HTTP определяет и другие , реже используемые, методы: HEAD,TRACE,OPTIONS,CONNECT.

GET - это обычная операция считывания , которая запрашивает представление ресурса. Операция GET доллжна реализоваться
безопасным образом, то есть не изменять состояни ресурса! Кроме того , запрос GET должен быть идемпотентным. Это
означает , что он должен оставлять ресурс в одном и том же состоянии , независимо от того, сколько раз он вызывался:
единожды, дважды или больше. Безопасность идемпотентность обеспечивают значительную стабильность. Когда клиент не
получает ответа (например, из-за отказа сети), он может обновитьсвои запросы, и эти новые запросы будут ожидать
того же ответа, который был бы получен при первой попытке. При этом состояние ресурса на сервере не повреждается.

Если вызвать метод POST , имея определенное представление(текст,XML и т.д.), то будет создан новый ресурс , идентифици-
-руемый по URI, заявленному в запросе. Например POST может вызываться при прикреплении сообщения к файлу журнала,
записи комментария в блог, занесении книги в список и т.д. Следовательно метод POST не ни безопасным(состояние ресурса
изменяется), ни идемпотентным ( при двукратной отправке этого запроса мы получим два новых подчиненных объекта). Если
ресурс был создан на исходном сервере, то в ответ должен бытьполучен код состояния 201 - создан. В большинстве
браузеров генерируется лишь два вида запросов - GET и POST.

Запрос PUT предназначен для обновления состояния ресурса, сохраненного по указанному URI. Если URI запроса ссылается на
несуществующий ресурс, то ресурс будет создан именно по этому URI. Метод PUT может применяться , например, при
обновлении цены на книгу. Метод PUT небезопасен (так как состояние ресурса обновляется), но идемпотентен: можно многократно
отослать один и тот же запрос PUT, а конечно состояние ресурса останется неизменным.

Запрос DELETE удаляет ресурс.Небезопасен , но идемпотентный.

                                    Согласование содержимого .

Согласование содержимого определяется как "механизм автоматического определения необходимого представления при наличии
нескольких разнотипных вариантов представлений".

                                    Типы содержимого.

HTTP использует медиатипы, применяемые в Интернете (более известные как MIME-типы) . Они записываются в полях заголовков
Content-Type и Accept для обеспечения открытой и расширяемой типизации данных и согласования типов. Медиатипы Интернета
подразделяются на пять самостоятельных основных категорий: text,image,audio,vieo и application. Эти типы далее класси-
фицируются на несколько подтипов(text/plain,text/xml,text/xhtml и т.д.) Рассмотрим наиболее распространенные обще-
-употребительные типы содержимого:
    text/plain - используется по умолчанию, им записываются простые текстовые сообщения;
    text/html - очень часто применяется в наших браузерах. Данный тип информирует пользовательский агент, что содержимое
                это веб-страница на языке HTML;
    image/gif,image/jpeg,image/png - этот обобщающий тип, соответствующий изображниям нескольких типов, требует устройства
                отображения (графический дисплей, принтер) и для просмотра информации.
    text/xml,   application/xml - формат, используемый для обмена XML-сообщениями;
    application/json - объектная нотаци/ JavaScript(JSON). Это легковесный текстовый формат для обмена данными , не
                зависящий от конкретного языка программирования.


                                        Коды состояния.

При получении каждого ответа с ним ассоциируется HTTP-код. Status-Code - это трехзначное целое число, описывающее
контекст, в котором произошел ответ . Первая цифра указывает один из классов ответа:
    1xx - информационный: запрос получен, процесс продолжает работу;
    2xx - успех: действие было успешно получено, интерпретировано и принято;
    3xx - перенаправление: необходимо выполнить дополнительные действия для удовлетворения запроса;
    4xx - клиентская ошибка: запрос содержит ошибочный синтаксис или не может быть удовлетворен;
    5xx - серверная ошибка: серверу не удалось выполнить запрос, который на первыый взгляд был совершенно правильным.

                                    Кэширование и условные запросы.

В большинстве распределенных систем роль кэширования невозможно переоценить.
Цель кэширования - оптимизация производительности , достигаемая методом исключения ненужных запросов или снижения
объема данных в откликах.

                              Обзор спецификаций веб-служб с передачей состояния представления.

    В отличии от стеков SOAP и WS-*, опирающихся на стандарты W3C,REST не имеет стандарта и является просто стилем
архитектуры, в котором есть свои принципы проектирования. Приложения в стиле REST значительно зависят от других стандарт.
-HTTP;
-URI,URL;
-XML,JSON,HTML,GIF,JPEG  и т.д.(представления ресурсов).

                                    Краткая история REST.

Термин REST впервые появился в диссертации Роя Томача Филдинга "Архитектурные стили и проектирование архитектур програм-
мных систем , поддерживающих работу в сети" . Диссертация представляет собой ретроспективное описание архитектуры на
базе которой была создана Всемирная паутина. В этой работе Филдинг рассматривает те части Сети, которые функционируют
особенно хорошо, и вычленяет принципы проектированияя, которые позволили бы создать другую распределнную гипермедийную
систему. Предполагается, что она одолжна быть не менее эффективной, чем Интернет, но может быть и не связана с ним.
    Итак, в основе проекта REST лежало стремление создать подобную сетевую архитектурную модель.

                                API Java для веб-служб с передачей состояния представления.

Для написания веб-служб REST на языке Java вам понадобятся лишь клиент и сервер, поддерживающий взаимодействие по
протоколу HTTP. Любой браузер и контейнер HTTP-сервлетов решит такую задачу - вам придется лишь озаботиться определенной
конфигурацией XML и состряпать свзяующий код для синтакического анализа запросов и ответов HTTP. Но когда такой код
оказедтся написан, его будет практический невозможно читать и поддерживать. Вот тут-то нам и пригодится JAX-RS.
Как видите,написав несколько аннотаций, вы получаете широчайшие возможности для вызова HTTP-ресурсов и их синтаксического
анализа.
    Первая версия спецификации JAX-RS(запрос на спецификацию JSR 311) была готова в октябре 2008 года.  В ней был опре-
делен набор API, на основе которых строится архитектурный стиль REST. Но вданном варианте спецификации была описана лишь
серверная часть REST. С появлением платформы JAVA EE7 спецификация JAX-RS была обновлена до версии 2.0. Среди других
ее нововведений можно назвать описание клиентского API.


                            Структура веб-службы с передачей состояния представления.

Единственная обязательная аннотация, нужная для превращения POJO в REST-службу - это @Path. JAX-RS работает на основе
"конфигурации по исключениям", то есть располагает набором аннотация для конфигурирования стандартного поведения.
Требования для написания REST-службы:

-


Хорошее объяснение REST https://habr.com/company/hexlet/blog/274675/













